"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const clc = require("cli-color");
const { marked } = require("marked");
const ora = require("ora");
const TerminalRenderer = require("marked-terminal");
const checkMinRequiredVersion_1 = require("../checkMinRequiredVersion");
const command_1 = require("../command");
const error_1 = require("../error");
const projectUtils_1 = require("../projectUtils");
const extensionsApi = require("../extensions/extensionsApi");
const extensionsHelper_1 = require("../extensions/extensionsHelper");
const paramHelper = require("../extensions/paramHelper");
const requirePermissions_1 = require("../requirePermissions");
const utils = require("../utils");
const logger_1 = require("../logger");
const refs = require("../extensions/refs");
const manifest = require("../extensions/manifest");
const functional_1 = require("../functional");
const paramHelper_1 = require("../extensions/paramHelper");
marked.setOptions({
    renderer: new TerminalRenderer(),
});
exports.default = new command_1.Command("ext:configure <extensionInstanceId>")
    .description("configure an existing extension instance")
    .withForce()
    .option("--params <paramsFile>", "path of params file with .env format.")
    .option("--local", "save to firebase.json rather than directly install to a Firebase project")
    .before(requirePermissions_1.requirePermissions, [
    "firebaseextensions.instances.update",
    "firebaseextensions.instances.get",
])
    .before(checkMinRequiredVersion_1.checkMinRequiredVersion, "extMinVersion")
    .before(extensionsHelper_1.diagnoseAndFixProject)
    .action(async (instanceId, options) => {
    var _a;
    const projectId = (0, projectUtils_1.getProjectId)(options);
    if (options.local) {
        if (options.nonInteractive) {
            throw new error_1.FirebaseError(`Command not supported in non-interactive mode, edit ./extensions/${instanceId}.env directly instead`);
        }
        const config = manifest.loadConfig(options);
        const targetRef = manifest.getInstanceRef(instanceId, config);
        const extensionVersion = await extensionsApi.getExtensionVersion(refs.toExtensionVersionRef(targetRef));
        const oldParamValues = manifest.readInstanceParam({
            instanceId,
            projectDir: config.projectDir,
        });
        const [immutableParams, tbdParams] = (0, functional_1.partition)(extensionVersion.spec.params, (param) => { var _a; return (_a = param.immutable) !== null && _a !== void 0 ? _a : false; });
        infoImmutableParams(immutableParams, oldParamValues);
        paramHelper.setNewDefaults(tbdParams, oldParamValues);
        const mutableParamsBindingOptions = await paramHelper.getParams({
            projectId,
            paramSpecs: tbdParams,
            nonInteractive: false,
            paramsEnvPath: ((_a = options.params) !== null && _a !== void 0 ? _a : ""),
            instanceId,
            reconfiguring: true,
        });
        const newParamOptions = Object.assign(Object.assign({}, (0, paramHelper_1.buildBindingOptionsWithBaseValue)(oldParamValues)), mutableParamsBindingOptions);
        await manifest.writeToManifest([
            {
                instanceId,
                ref: targetRef,
                params: newParamOptions,
                paramSpecs: extensionVersion.spec.params,
            },
        ], config, {
            nonInteractive: false,
            force: true,
        });
        manifest.showPreviewWarning();
        return;
    }
    const spinner = ora(`Configuring ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);
    try {
        let existingInstance;
        try {
            existingInstance = await extensionsApi.getInstance((0, projectUtils_1.needProjectId)({ projectId }), instanceId);
        }
        catch (err) {
            if (err.status === 404) {
                return utils.reject(`No extension instance ${instanceId} found in project ${projectId}.`, {
                    exit: 1,
                });
            }
            throw err;
        }
        const paramSpecWithNewDefaults = paramHelper.getParamsWithCurrentValuesAsDefaults(existingInstance);
        const immutableParams = _.remove(paramSpecWithNewDefaults, (param) => param.immutable);
        const paramBindingOptions = await paramHelper.getParams({
            projectId,
            paramSpecs: paramSpecWithNewDefaults,
            nonInteractive: options.nonInteractive,
            paramsEnvPath: options.params,
            instanceId,
            reconfiguring: true,
        });
        const paramBindings = (0, paramHelper_1.getBaseParamBindings)(paramBindingOptions);
        if (immutableParams.length) {
            const plural = immutableParams.length > 1;
            logger_1.logger.info(`The following param${plural ? "s are" : " is"} immutable:`);
            for (const { param } of immutableParams) {
                const value = _.get(existingInstance, `config.params.${param}`);
                logger_1.logger.info(`param: ${param}, value: ${value}`);
                paramBindings[param] = value;
            }
            logger_1.logger.info((plural
                ? "To set different values for these params"
                : "To set a different value for this param") +
                ", uninstall the extension, then install a new instance of this extension.");
        }
        spinner.start();
        const res = await extensionsApi.configureInstance({
            projectId: (0, projectUtils_1.needProjectId)({ projectId }),
            instanceId,
            params: paramBindings,
        });
        spinner.stop();
        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully configured ${clc.bold(instanceId)}.`);
        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your reconfigured instance in the Firebase console: ${utils.consoleUrl((0, projectUtils_1.needProjectId)({ projectId }), `/extensions/instances/${instanceId}?tab=config`)}`));
        manifest.showDeprecationWarning();
        return res;
    }
    catch (err) {
        if (spinner.isSpinning) {
            spinner.fail();
        }
        if (!(err instanceof error_1.FirebaseError)) {
            throw new error_1.FirebaseError(`Error occurred while configuring the instance: ${err.message}`, {
                original: err,
            });
        }
        throw err;
    }
});
function infoImmutableParams(immutableParams, paramValues) {
    if (!immutableParams.length) {
        return;
    }
    const plural = immutableParams.length > 1;
    utils.logLabeledWarning(extensionsHelper_1.logPrefix, marked(`The following param${plural ? "s are" : " is"} immutable and won't be changed:`));
    for (const { param } of immutableParams) {
        logger_1.logger.info(`param: ${param}, value: ${paramValues[param]}`);
    }
    logger_1.logger.info((plural
        ? "To set different values for these params"
        : "To set a different value for this param") +
        ", uninstall the extension, then install a new instance of this extension.");
}
